<?php
/**
 * Created by PhpStorm.
 * User: chenmingming
 * Date: 2017/1/1
 * Time: 22:45
 */

namespace mmxs\mmapi\tests;

use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Query\QueryBuilder;
use mmapi\core\App;
use mmapi\core\Config;
use mmapi\core\Db;
use PHPUnit\Framework\TestCase;

class QueryBuilderTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Config::set('db', [
            'default' => [
                'is_dev_mode' => true,
                'conn'        => [
                    'driver'   => 'pdo_mysql',
                    'dbname'   => 'cmm',
                    'host'     => '127.0.0.1',
                    'user'     => 'root',
                    'password' => '123456',
                ],
                'path'        => [],
            ],
        ]);
    }

    protected function formatStr(\mmapi\core\QueryBuilder $builder)
    {
        $str = strtolower($builder);

        $str = preg_replace('/[ ]{2,}/', ' ', $str);

        $str = preg_replace('/[ ]+$/', '', $str);

        return $str;
    }

    public function testSelect()
    {
        $expected = 'select * from `master` where id = ?';
        $actual   = \mmapi\core\QueryBuilder::create([])
            ->select()
            ->from('master')
            ->where('id')
            ->eq(1);
        $this->assertEquals($expected, $this->formatStr($actual));

        $expected = 'select * from `master` where id in (?,?)';
        $actual   = \mmapi\core\QueryBuilder::create([])
            ->select()
            ->from('master')
            ->where('id')
            ->in([1, 2]);
        $this->assertEquals($expected, $this->formatStr($actual));

        $this->assertEquals(Db::query($expected, [1, 2])->fetch(), $actual->fetch());

    }

    public function testSelect3()
    {

        $expected = 'select * from master where id like 1';
        $actual   = \mmapi\core\QueryBuilder::create([])
            ->select()
            ->from('master')
            ->where('id')
            ->exp('1', 'like');

        $this->assertEquals(Db::query($expected)->fetch(), $actual->fetch());

        $expected = 'select * from master where id = groupid';
        $actual   = \mmapi\core\QueryBuilder::create([])
            ->select()
            ->from('master')
            ->where('id=groupid');

        $this->assertEquals(Db::query($expected)->fetch(), $actual->fetch());
        $actual = \mmapi\core\QueryBuilder::create([])
            ->select()
            ->from('master')
            ->where('id')
            ->exp('=groupid');
        $this->assertEquals(Db::query($expected)->fetch(), $actual->fetch());

    }

    public function testSelect2()
    {
        $expected = Db::query('select * from master where id = 1')->fetch();

        $actual = \mmapi\core\QueryBuilder::create([])
            ->select('*')
            ->from('master')
            ->where('id')
            ->eq(1)
            ->fetch();
        $this->assertEquals($expected, $actual);

        $expected = Db::query('select * from master where id = 1 or id = 2')->fetch();

        $actual = \mmapi\core\QueryBuilder::create([])
            ->select('*')
            ->from('master')
            ->where('id')
            ->eq(1)
            ->orWhere('id=2')
            ->fetch();
        $this->assertEquals($expected, $actual);
    }

    public function testSelectOrder()
    {
        $expected = Db::query('select * from master where id > 1 order by ')->fetch();

        $actual = \mmapi\core\QueryBuilder::create([])
            ->select('*')
            ->from('master')
            ->where('id')
            ->eq(1)
            ->fetch();
        $this->assertEquals($expected, $actual);
    }

    public function testUpdate1()
    {
        $now      = date('Y-m-d H:i:s');
        $expected = "update `master` set `add_time`=? where id = ?";
        $actual   = \mmapi\core\QueryBuilder::create([])
            ->update('master')
            ->set('add_time')
            ->value($now)
            ->where('id')
            ->eq(1);
        $this->assertEquals($expected, $this->formatStr($actual));

        $affectNums = $actual->exec();
        $this->assertEquals($affectNums, 1);

        $arr = \mmapi\core\QueryBuilder::create([])
            ->select('add_time')
            ->from('master')
            ->where('id=1')
            ->getField('add_time');
        $this->assertEquals($arr, $now);

    }
}